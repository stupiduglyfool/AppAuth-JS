"use strict";
/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var token_response_1 = require("./token_response");
describe('Token Response tests', function () {
    var accessToken = 'accessToken';
    it('Basic Token Response Tests', function () {
        var response = new token_response_1.TokenResponse(accessToken);
        expect(response).not.toBeNull();
        expect(response.accessToken).toBe(accessToken);
        expect(response.tokenType).toBe('bearer');
        expect(response.issuedAt).toBeTruthy();
        expect(response.isValid()).toBe(true);
        expect(response.refreshToken).toBeFalsy();
        expect(response.scope).toBeFalsy();
    });
    it('Test response token validity', function () {
        var response = new token_response_1.TokenResponse(accessToken, undefined /* refresh token */, undefined /* scope */, 'bearer', 1 /* issued at */, 1000 /* expires in*/);
        expect(response).not.toBeNull();
        expect(response.accessToken).toBe(accessToken);
        expect(response.tokenType).toBe('bearer');
        expect(response.issuedAt).toBeTruthy();
        expect(response.isValid()).toBe(false);
        expect(response.refreshToken).toBeFalsy();
        expect(response.scope).toBeFalsy();
    });
    it('To Json() and from Json() should work', function () {
        var response = new token_response_1.TokenResponse(accessToken);
        var json = JSON.parse(JSON.stringify(response.toJson()));
        var newResponse = token_response_1.TokenResponse.fromJson(json);
        expect(newResponse).not.toBeNull();
        expect(newResponse.accessToken).toBe(accessToken);
        expect(newResponse.tokenType).toBe('bearer');
        expect(newResponse.issuedAt).toBeTruthy();
        expect(newResponse.isValid()).toBe(true);
        expect(newResponse.refreshToken).toBeFalsy();
        expect(newResponse.scope).toBeFalsy();
    });
    it('Basic Token Error Tests', function () {
        var error = new token_response_1.TokenError('invalid_client');
        expect(error).toBeTruthy();
        expect(error.error).toBe('invalid_client');
        expect(error.errorDescription).toBeFalsy();
        expect(error.errorUri).toBeFalsy();
    });
    it('To Json and from JSON should work for errors', function () {
        var error = new token_response_1.TokenError('invalid_client');
        var json = JSON.parse(JSON.stringify(error.toJson()));
        var newError = token_response_1.TokenError.fromJson(json);
        expect(newError).toBeTruthy();
        expect(newError.error).toBe('invalid_client');
        expect(newError.errorDescription).toBeFalsy();
        expect(newError.errorUri).toBeFalsy();
    });
});
//# sourceMappingURL=data:application/json;base64,