"use strict";
/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var authorization_request_1 = require("./authorization_request");
describe('AuthorizationRequest Tests', function () {
    var clientId = 'client_id';
    var redirectUri = 'http://my/redirect_uri';
    var scope = 'scope';
    var state = 'state';
    var extras = { 'key': 'value' };
    var request = new authorization_request_1.AuthorizationRequest(clientId, redirectUri, scope, authorization_request_1.AuthorizationRequest.RESPONSE_TYPE_CODE, state, extras);
    var request2 = new authorization_request_1.AuthorizationRequest(clientId, redirectUri, scope, authorization_request_1.AuthorizationRequest.RESPONSE_TYPE_CODE, undefined, extras);
    it('Basic Authorization Request Tests', function () {
        expect(request).not.toBeNull();
        expect(request.responseType).toBe(authorization_request_1.AuthorizationRequest.RESPONSE_TYPE_CODE);
        expect(request.clientId).toBe(clientId);
        expect(request.redirectUri).toBe(redirectUri);
        expect(request.scope).toBe(scope);
        expect(request.state).toBe(state);
        expect(request.extras).toBeTruthy();
        expect(request.extras['key']).toBe('value');
        expect(request.extras).toEqual(extras);
    });
    it('To Json() and from Json() should work', function () {
        var json = JSON.parse(JSON.stringify(request.toJson()));
        expect(json).not.toBeNull();
        var newRequest = authorization_request_1.AuthorizationRequest.fromJson(json);
        expect(newRequest).not.toBeNull();
        expect(newRequest.responseType).toBe(authorization_request_1.AuthorizationRequest.RESPONSE_TYPE_CODE);
        expect(newRequest.clientId).toBe(clientId);
        expect(newRequest.redirectUri).toBe(redirectUri);
        expect(newRequest.scope).toBe(scope);
        expect(newRequest.state).toBe(state);
        expect(newRequest.extras).toBeTruthy();
        expect(newRequest.extras['key']).toBe('value');
        expect(newRequest.extras).toEqual(extras);
    });
    it('Expect cryptographic newState() to populate state', function () {
        expect(request2.state).not.toBeNull();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aG9yaXphdGlvbl9yZXF1ZXN0X3Rlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYXV0aG9yaXphdGlvbl9yZXF1ZXN0X3Rlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7R0FZRzs7QUFFSCxpRUFBNkQ7QUFHN0QsUUFBUSxDQUFDLDRCQUE0QixFQUFFO0lBRWxDLElBQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQztJQUM3QixJQUFNLFdBQVcsR0FBRyx3QkFBd0IsQ0FBQztJQUM3QyxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUM7SUFDdEIsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDO0lBQ3RCLElBQU0sTUFBTSxHQUFjLEVBQUMsS0FBSyxFQUFFLE9BQU8sRUFBQyxDQUFDO0lBRTNDLElBQUksT0FBTyxHQUF5QixJQUFJLDRDQUFvQixDQUN4RCxRQUFRLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSw0Q0FBb0IsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFMUYsSUFBSSxRQUFRLEdBQXlCLElBQUksNENBQW9CLENBQ3pELFFBQVEsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLDRDQUFvQixDQUFDLGtCQUFrQixFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUU5RixFQUFFLENBQUMsbUNBQW1DLEVBQUU7UUFDbkMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMvQixNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyw0Q0FBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzNFLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsdUNBQXVDLEVBQUU7UUFDdkMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM1QixJQUFJLFVBQVUsR0FBRyw0Q0FBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNsQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyw0Q0FBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzlFLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdkMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsbURBQW1ELEVBQUU7UUFDbkQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7QUFFUixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0XHJcbiAqIGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZVxyXG4gKiBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtBdXRob3JpemF0aW9uUmVxdWVzdH0gZnJvbSAnLi9hdXRob3JpemF0aW9uX3JlcXVlc3QnO1xyXG5pbXBvcnQge1N0cmluZ01hcH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5kZXNjcmliZSgnQXV0aG9yaXphdGlvblJlcXVlc3QgVGVzdHMnLCAoKSA9PiB7XHJcblxyXG4gICAgIGNvbnN0IGNsaWVudElkID0gJ2NsaWVudF9pZCc7XHJcbiAgICAgY29uc3QgcmVkaXJlY3RVcmkgPSAnaHR0cDovL215L3JlZGlyZWN0X3VyaSc7XHJcbiAgICAgY29uc3Qgc2NvcGUgPSAnc2NvcGUnO1xyXG4gICAgIGNvbnN0IHN0YXRlID0gJ3N0YXRlJztcclxuICAgICBjb25zdCBleHRyYXM6IFN0cmluZ01hcCA9IHsna2V5JzogJ3ZhbHVlJ307XHJcblxyXG4gICAgIGxldCByZXF1ZXN0OiBBdXRob3JpemF0aW9uUmVxdWVzdCA9IG5ldyBBdXRob3JpemF0aW9uUmVxdWVzdChcclxuICAgICAgICAgY2xpZW50SWQsIHJlZGlyZWN0VXJpLCBzY29wZSwgQXV0aG9yaXphdGlvblJlcXVlc3QuUkVTUE9OU0VfVFlQRV9DT0RFLCBzdGF0ZSwgZXh0cmFzKTtcclxuXHJcbiAgICAgbGV0IHJlcXVlc3QyOiBBdXRob3JpemF0aW9uUmVxdWVzdCA9IG5ldyBBdXRob3JpemF0aW9uUmVxdWVzdChcclxuICAgICAgICAgY2xpZW50SWQsIHJlZGlyZWN0VXJpLCBzY29wZSwgQXV0aG9yaXphdGlvblJlcXVlc3QuUkVTUE9OU0VfVFlQRV9DT0RFLCB1bmRlZmluZWQsIGV4dHJhcyk7XHJcblxyXG4gICAgIGl0KCdCYXNpYyBBdXRob3JpemF0aW9uIFJlcXVlc3QgVGVzdHMnLCAoKSA9PiB7XHJcbiAgICAgICAgICBleHBlY3QocmVxdWVzdCkubm90LnRvQmVOdWxsKCk7XHJcbiAgICAgICAgICBleHBlY3QocmVxdWVzdC5yZXNwb25zZVR5cGUpLnRvQmUoQXV0aG9yaXphdGlvblJlcXVlc3QuUkVTUE9OU0VfVFlQRV9DT0RFKTtcclxuICAgICAgICAgIGV4cGVjdChyZXF1ZXN0LmNsaWVudElkKS50b0JlKGNsaWVudElkKTtcclxuICAgICAgICAgIGV4cGVjdChyZXF1ZXN0LnJlZGlyZWN0VXJpKS50b0JlKHJlZGlyZWN0VXJpKTtcclxuICAgICAgICAgIGV4cGVjdChyZXF1ZXN0LnNjb3BlKS50b0JlKHNjb3BlKTtcclxuICAgICAgICAgIGV4cGVjdChyZXF1ZXN0LnN0YXRlKS50b0JlKHN0YXRlKTtcclxuICAgICAgICAgIGV4cGVjdChyZXF1ZXN0LmV4dHJhcykudG9CZVRydXRoeSgpO1xyXG4gICAgICAgICAgZXhwZWN0KHJlcXVlc3QuZXh0cmFzIVsna2V5J10pLnRvQmUoJ3ZhbHVlJyk7XHJcbiAgICAgICAgICBleHBlY3QocmVxdWVzdC5leHRyYXMpLnRvRXF1YWwoZXh0cmFzKTtcclxuICAgICB9KTtcclxuXHJcbiAgICAgaXQoJ1RvIEpzb24oKSBhbmQgZnJvbSBKc29uKCkgc2hvdWxkIHdvcmsnLCAoKSA9PiB7XHJcbiAgICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVxdWVzdC50b0pzb24oKSkpO1xyXG4gICAgICAgICAgZXhwZWN0KGpzb24pLm5vdC50b0JlTnVsbCgpO1xyXG4gICAgICAgICAgbGV0IG5ld1JlcXVlc3QgPSBBdXRob3JpemF0aW9uUmVxdWVzdC5mcm9tSnNvbihqc29uKTtcclxuICAgICAgICAgIGV4cGVjdChuZXdSZXF1ZXN0KS5ub3QudG9CZU51bGwoKTtcclxuICAgICAgICAgIGV4cGVjdChuZXdSZXF1ZXN0LnJlc3BvbnNlVHlwZSkudG9CZShBdXRob3JpemF0aW9uUmVxdWVzdC5SRVNQT05TRV9UWVBFX0NPREUpO1xyXG4gICAgICAgICAgZXhwZWN0KG5ld1JlcXVlc3QuY2xpZW50SWQpLnRvQmUoY2xpZW50SWQpO1xyXG4gICAgICAgICAgZXhwZWN0KG5ld1JlcXVlc3QucmVkaXJlY3RVcmkpLnRvQmUocmVkaXJlY3RVcmkpO1xyXG4gICAgICAgICAgZXhwZWN0KG5ld1JlcXVlc3Quc2NvcGUpLnRvQmUoc2NvcGUpO1xyXG4gICAgICAgICAgZXhwZWN0KG5ld1JlcXVlc3Quc3RhdGUpLnRvQmUoc3RhdGUpO1xyXG4gICAgICAgICAgZXhwZWN0KG5ld1JlcXVlc3QuZXh0cmFzKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgICAgICBleHBlY3QobmV3UmVxdWVzdC5leHRyYXMhWydrZXknXSkudG9CZSgndmFsdWUnKTtcclxuICAgICAgICAgIGV4cGVjdChuZXdSZXF1ZXN0LmV4dHJhcykudG9FcXVhbChleHRyYXMpO1xyXG4gICAgIH0pO1xyXG5cclxuICAgICBpdCgnRXhwZWN0IGNyeXB0b2dyYXBoaWMgbmV3U3RhdGUoKSB0byBwb3B1bGF0ZSBzdGF0ZScsICgpID0+IHtcclxuICAgICAgICAgIGV4cGVjdChyZXF1ZXN0Mi5zdGF0ZSkubm90LnRvQmVOdWxsKCk7XHJcbiAgICAgfSk7XHJcblxyXG59KTtcclxuIl19