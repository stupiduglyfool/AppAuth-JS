"use strict";
/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var token_request_1 = require("./token_request");
describe('Token Request tests', function () {
    var clientId = 'client_id';
    var redirectUri = 'http://my/redirect_uri';
    var code = 'some_code';
    var extras = { 'key': 'value' };
    var request = new token_request_1.TokenRequest(clientId, redirectUri, token_request_1.GRANT_TYPE_AUTHORIZATION_CODE, code, undefined, extras);
    it('Basic Token Request Tests', function () {
        expect(request).not.toBeNull();
        expect(request.clientId).toBe(clientId);
        expect(request.redirectUri).toBe(redirectUri);
        expect(request.code).toBe(code);
        expect(request.grantType).toBe(token_request_1.GRANT_TYPE_AUTHORIZATION_CODE);
        expect(request.extras).toBeTruthy();
        expect(request.extras['key']).toBe('value');
        expect(request.extras).toEqual(extras);
    });
    it('To Json() and from Json() should work', function () {
        var json = JSON.parse(JSON.stringify(request.toJson()));
        expect(json).not.toBeNull();
        var newRequest = token_request_1.TokenRequest.fromJson(json);
        expect(newRequest).not.toBeNull();
        expect(newRequest.clientId).toBe(clientId);
        expect(newRequest.redirectUri).toBe(redirectUri);
        expect(newRequest.code).toBe(code);
        expect(newRequest.grantType).toBe(token_request_1.GRANT_TYPE_AUTHORIZATION_CODE);
        expect(newRequest.extras).toBeTruthy();
        expect(newRequest.extras['key']).toBe('value');
        expect(newRequest.extras).toEqual(extras);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5fcmVxdWVzdF90ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3Rva2VuX3JlcXVlc3RfdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7OztHQVlHOztBQUVILGlEQUE4RjtBQUc5RixRQUFRLENBQUMscUJBQXFCLEVBQUU7SUFFM0IsSUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDO0lBQzdCLElBQU0sV0FBVyxHQUFHLHdCQUF3QixDQUFDO0lBQzdDLElBQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQztJQUN6QixJQUFNLE1BQU0sR0FBYyxFQUFDLEtBQUssRUFBRSxPQUFPLEVBQUMsQ0FBQztJQUUzQyxJQUFJLE9BQU8sR0FBaUIsSUFBSSw0QkFBWSxDQUN4QyxRQUFRLEVBQUUsV0FBVyxFQUFFLDZDQUE2QixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFbkYsRUFBRSxDQUFDLDJCQUEyQixFQUFFO1FBQzNCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDL0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDOUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsNkNBQTZCLENBQUMsQ0FBQztRQUM5RCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVDQUF1QyxFQUFFO1FBQ3ZDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDNUIsSUFBSSxVQUFVLEdBQUcsNEJBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNsQyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNqRCxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyw2Q0FBNkIsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdkMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDLENBQUM7QUFFUixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0XHJcbiAqIGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZVxyXG4gKiBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtHUkFOVF9UWVBFX0FVVEhPUklaQVRJT05fQ09ERSwgVG9rZW5SZXF1ZXN0LCBUb2tlblJlcXVlc3RKc29ufSBmcm9tICcuL3Rva2VuX3JlcXVlc3QnO1xyXG5pbXBvcnQge1N0cmluZ01hcH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5kZXNjcmliZSgnVG9rZW4gUmVxdWVzdCB0ZXN0cycsICgpID0+IHtcclxuXHJcbiAgICAgY29uc3QgY2xpZW50SWQgPSAnY2xpZW50X2lkJztcclxuICAgICBjb25zdCByZWRpcmVjdFVyaSA9ICdodHRwOi8vbXkvcmVkaXJlY3RfdXJpJztcclxuICAgICBjb25zdCBjb2RlID0gJ3NvbWVfY29kZSc7XHJcbiAgICAgY29uc3QgZXh0cmFzOiBTdHJpbmdNYXAgPSB7J2tleSc6ICd2YWx1ZSd9O1xyXG5cclxuICAgICBsZXQgcmVxdWVzdDogVG9rZW5SZXF1ZXN0ID0gbmV3IFRva2VuUmVxdWVzdChcclxuICAgICAgICAgY2xpZW50SWQsIHJlZGlyZWN0VXJpLCBHUkFOVF9UWVBFX0FVVEhPUklaQVRJT05fQ09ERSwgY29kZSwgdW5kZWZpbmVkLCBleHRyYXMpO1xyXG5cclxuICAgICBpdCgnQmFzaWMgVG9rZW4gUmVxdWVzdCBUZXN0cycsICgpID0+IHtcclxuICAgICAgICAgIGV4cGVjdChyZXF1ZXN0KS5ub3QudG9CZU51bGwoKTtcclxuICAgICAgICAgIGV4cGVjdChyZXF1ZXN0LmNsaWVudElkKS50b0JlKGNsaWVudElkKTtcclxuICAgICAgICAgIGV4cGVjdChyZXF1ZXN0LnJlZGlyZWN0VXJpKS50b0JlKHJlZGlyZWN0VXJpKTtcclxuICAgICAgICAgIGV4cGVjdChyZXF1ZXN0LmNvZGUpLnRvQmUoY29kZSk7XHJcbiAgICAgICAgICBleHBlY3QocmVxdWVzdC5ncmFudFR5cGUpLnRvQmUoR1JBTlRfVFlQRV9BVVRIT1JJWkFUSU9OX0NPREUpO1xyXG4gICAgICAgICAgZXhwZWN0KHJlcXVlc3QuZXh0cmFzKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgICAgICBleHBlY3QocmVxdWVzdC5leHRyYXMhWydrZXknXSkudG9CZSgndmFsdWUnKTtcclxuICAgICAgICAgIGV4cGVjdChyZXF1ZXN0LmV4dHJhcykudG9FcXVhbChleHRyYXMpO1xyXG4gICAgIH0pO1xyXG5cclxuICAgICBpdCgnVG8gSnNvbigpIGFuZCBmcm9tIEpzb24oKSBzaG91bGQgd29yaycsICgpID0+IHtcclxuICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXF1ZXN0LnRvSnNvbigpKSk7XHJcbiAgICAgICAgICBleHBlY3QoanNvbikubm90LnRvQmVOdWxsKCk7XHJcbiAgICAgICAgICBsZXQgbmV3UmVxdWVzdCA9IFRva2VuUmVxdWVzdC5mcm9tSnNvbihqc29uKTtcclxuICAgICAgICAgIGV4cGVjdChuZXdSZXF1ZXN0KS5ub3QudG9CZU51bGwoKTtcclxuICAgICAgICAgIGV4cGVjdChuZXdSZXF1ZXN0LmNsaWVudElkKS50b0JlKGNsaWVudElkKTtcclxuICAgICAgICAgIGV4cGVjdChuZXdSZXF1ZXN0LnJlZGlyZWN0VXJpKS50b0JlKHJlZGlyZWN0VXJpKTtcclxuICAgICAgICAgIGV4cGVjdChuZXdSZXF1ZXN0LmNvZGUpLnRvQmUoY29kZSk7XHJcbiAgICAgICAgICBleHBlY3QobmV3UmVxdWVzdC5ncmFudFR5cGUpLnRvQmUoR1JBTlRfVFlQRV9BVVRIT1JJWkFUSU9OX0NPREUpO1xyXG4gICAgICAgICAgZXhwZWN0KG5ld1JlcXVlc3QuZXh0cmFzKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgICAgICBleHBlY3QobmV3UmVxdWVzdC5leHRyYXMhWydrZXknXSkudG9CZSgndmFsdWUnKTtcclxuICAgICAgICAgIGV4cGVjdChuZXdSZXF1ZXN0LmV4dHJhcykudG9FcXVhbChleHRyYXMpO1xyXG4gICAgIH0pO1xyXG5cclxufSk7XHJcbiJdfQ==